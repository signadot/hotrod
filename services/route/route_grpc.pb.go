// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: services/route/route.proto

package route

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoutesService_FindRoute_FullMethodName = "/route.RoutesService/FindRoute"
)

// RoutesServiceClient is the client API for RoutesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutesServiceClient interface {
	FindRoute(ctx context.Context, in *FindRouteRequest, opts ...grpc.CallOption) (*FindRouteResponse, error)
}

type routesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutesServiceClient(cc grpc.ClientConnInterface) RoutesServiceClient {
	return &routesServiceClient{cc}
}

func (c *routesServiceClient) FindRoute(ctx context.Context, in *FindRouteRequest, opts ...grpc.CallOption) (*FindRouteResponse, error) {
	out := new(FindRouteResponse)
	err := c.cc.Invoke(ctx, RoutesService_FindRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutesServiceServer is the server API for RoutesService service.
// All implementations must embed UnimplementedRoutesServiceServer
// for forward compatibility
type RoutesServiceServer interface {
	FindRoute(context.Context, *FindRouteRequest) (*FindRouteResponse, error)
	mustEmbedUnimplementedRoutesServiceServer()
}

// UnimplementedRoutesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoutesServiceServer struct {
}

func (UnimplementedRoutesServiceServer) FindRoute(context.Context, *FindRouteRequest) (*FindRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRoute not implemented")
}
func (UnimplementedRoutesServiceServer) mustEmbedUnimplementedRoutesServiceServer() {}

// UnsafeRoutesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutesServiceServer will
// result in compilation errors.
type UnsafeRoutesServiceServer interface {
	mustEmbedUnimplementedRoutesServiceServer()
}

func RegisterRoutesServiceServer(s grpc.ServiceRegistrar, srv RoutesServiceServer) {
	s.RegisterService(&RoutesService_ServiceDesc, srv)
}

func _RoutesService_FindRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServiceServer).FindRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutesService_FindRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServiceServer).FindRoute(ctx, req.(*FindRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutesService_ServiceDesc is the grpc.ServiceDesc for RoutesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "route.RoutesService",
	HandlerType: (*RoutesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindRoute",
			Handler:    _RoutesService_FindRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/route/route.proto",
}
