name: Go
on:
  push:
    branches: [ main ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches: [ main ]
env:
  GO_VERSION: "1.20"

jobs:

  # run change detection
  changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      customer: ${{ steps.filter.outputs.customer }}
      driver: ${{ steps.filter.outputs.driver }}
      frontend: ${{ steps.filter.outputs.frontend }}
      route: ${{ steps.filter.outputs.route }}
    steps:
      # The paths-filter action requires a checkout step for push events.
      - if: ${{ github.event_name == 'push' }}
        uses: actions/checkout@v2

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            customer:
              - 'services/customer/**'
              - 'cmd/customer.go'
              - 'pkg/**'
            driver:
              - 'services/driver/**'
              - 'cmd/driver.go'
              - 'pkg/**'
            frontend:
              - 'services/frontend/**'
              - 'cmd/frontend.go'
              - 'pkg/**'
            route:
              - 'services/route/**'
              - 'cmd/route.go'
              - 'pkg/**'

  build:
    runs-on: ubuntu-latest
    needs: [ changes ]
    env:
      DOCKER_CLI_EXPERIMENTAL: "enabled"
    steps:
      - uses: actions/checkout@v2
        with:
          # Goreleaser needs to see git history and tags.
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-mod-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-mod-

      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-build-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-build-

      - name: Setup qemu
        uses: docker/setup-qemu-action@v1

      - name: Docker Login
        uses: docker/login-action@v1.9.0
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag
        env:
          GIT_SHA: ${{ github.sha }}
        run: |
          # Make a fake tag so goreleaser will actually push images.
          git tag v0.0.1-snapshot.${GIT_SHA}

      - name: GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist
        env:
          GIT_SHA: ${{ github.sha }}
  
  sandbox-testing:
    runs-on: ubuntu-latest
    needs: [ build, changes ]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Create Sandbox
        id: create-sandbox
        env:
          SIGNADOT_ORG: signadot
          SIGNADOT_API_KEY: ${{ secrets.SIGNADOT_API_KEY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # run the cli
          # setting the gitsha to a short version to respect the name
          # limit (30 chars)
          docker run -i \
            -e SIGNADOT_ORG=${SIGNADOT_ORG} \
            -e SIGNADOT_API_KEY=${SIGNADOT_API_KEY} \
            signadot/signadot-cli \
            /signadot sandbox apply \
            --set github-pr=${{ github.event.number }} \
            --set image=signadot/hotrod:${IMAGE_TAG} \
            --set git-short-commit=${IMAGE_TAG:0:6} \
            -f - \
            -o yaml \
            < ${GITHUB_WORKSPACE}/.signadot/route-template.yaml \
            > ${GITHUB_WORKSPACE}/.signadot/route-response.yaml

      - name: Test Sandbox
        run: |
          go install github.com/mikefarah/yq/v4@latest
          endpoint=$(yq '.endpoints[0].url' ${GITHUB_WORKSPACE}/.signadot/route-response.yaml)
          
          pushd .
          cd test
          ENDPOINT=$endpoint SIGNADOT_API_KEY=${{ secrets.SIGNADOT_API_KEY }} 
          npm install

          # don't exit with error code if test fails and fail action. 
          npm test || true

          popd

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v2
        with:
          files: |
            test/*.xml
