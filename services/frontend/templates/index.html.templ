<!DOCTYPE html>
<html>
<meta charset="ISO-8859-1">
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">

<head>
	<title>HotROD - Rides On Demand{{ .TitleSuffix }}</title>
    <link rel="icon" type="image/x-icon" href="./web_assets/favicon.ico">
    <script src="./web_assets/jquery-3.7.1.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"
        crossorigin="anonymous"></script>

    <style>
        .hotrod-button {
            padding: 20px;
            cursor: pointer;
            margin-top: 10px;
        }

        .margintop {
            margin-top: 15px;
        }

        .marginright {
            margin-right: 15px;
        }

        .space {
            margin: 0;
            padding: 0;
            height: 30px;
        }

        .button {
            cursor: pointer;
        }

        .button:hover {
            cursor: pointer;
            filter: brightness(85%);
        }

        .route {
            color: #eeaf27;
        }

        .driver {
            color: #4faaf9;
        }

        .location {
            color: #51b831;
        }

        .frontend {
            color: #e2a0a0;
        }

        .browser {
            color: #c86ddc;
        }

        .log-group-header {
            margin-bottom: 10px;
            color: #768aad;
        }

        .log-group-entries {
            margin-left: 20px;
            margin-bottom: 20px;
        }
    </style>
</head>

<body>
    <div class="container text-center margintop">
        <h1>Hot R.O.D.</h1>
        <h4><em> Request a Ride ðŸš— </em></h4>
        <div class="space"></div>

        <div class="row" style="margin-top: 20px;">
            <div class="col-3 align-items-center" style="margin-top: 5em;">
                <div class="mb-3">
                    <label for="pickupLocation" class="form-label fw-bold">Pick Up Location:</label>
                    <select id="pickupLocation" class="form-select text-secondary">
                        {{ range $location := $.Locations }}
                        <option value="{{ $location.ID }}">{{ $location.Name }}</option>
                        {{ end }}
                    </select>
                </div>
                <div class="mb-3">
                    <label for="dropoffLocation" class="form-label fw-bold">Drop Off Location:</label>
                    <select id="dropoffLocation" class="form-select text-secondary">
                        {{ range $location := $.Locations }}
                        <option value="{{ $location.ID }}">{{ $location.Name }}</option>
                        {{ end }}
                    </select>
                </div>
                <button id="requestRide" type="button" class="btn btn-primary hotrod-button">Request Ride</button>
            </div>
            <div class="col-9" id="message-log" style="padding-left: 80px;">
            </div>
        </div>
    </div>
</body>

<script>
    var sessionID = Math.round(Math.random() * 10000);
    var lastRequestID = 0;
    var notificationsCursor = -1;

    // Use current URI as basepath for ajax requests
    var pathPrefix = window.location.pathname;
    pathPrefix = pathPrefix != "/" ? pathPrefix : '';

    var locationMap = {
        {{- range $location:= $.Locations -}}
            "{{ $location.ID }}": "{{ $location.Name }}",
        {{- end -}}
    };


    // functions definition
    // ------------------------------------------------------------------------

    function updateRequestID() {
        lastRequestID++;
    }

    function logError(dt, text, context) {
        if (context !== undefined && context.error !== undefined) {
            text += ' (' + context.error + ')';
        }
        log(dt, text, "text-danger", context)
    }

    function logSuccess(dt, text, context) {
        log(dt, text, "text-success", context)
    }

    function log(dt, text, color, context) {
        if (context === undefined || context.request === undefined) {
            return;
        }
        reqID = context.request.id
        pickupLocationID = context.request.pickupLocationID
        dropoffLocationID = context.request.dropoffLocationID

        // Create the log group (if it doesn't exist)
        if ($('#' + reqID).length == 0) {
            $("#message-log").prepend(
                '<div class="row" id="' + reqID + '">' +
                '<div class="row">' +
                '<div class="col log-group-header fw-medium text-start border-info-subtle border-bottom">' +
                'RequestID: ' + reqID + ', ' +
                'From: "' + locationMap[pickupLocationID] + '", ' +
                'To: "' + locationMap[dropoffLocationID] + '", ' +
                'RoutingKey: <span id="' + reqID + '-rk">""</span>' +
                '</div>' +
                '</div>' +
                ' <div class="row log-group-entries" id="' + reqID + '-entries">' +
                '<div/>' +
                '</div>'
            );
        }

        // Update routing key in group header (if any)
        if (context.routingKey !== undefined && context.routingKey !== "") {
            $('#' + reqID + '-rk').html(context.routingKey);
        }

        // Append the log entry
        var time = String(dt.getHours()).padStart(2, '0') + ":" +
            String(dt.getMinutes()).padStart(2, '0') + ":" +
            String(dt.getSeconds()).padStart(2, '0') + "." +
            String(dt.getMilliseconds()).padStart(3, '0');

        var source = "browser"
        var sourceColor = source
        if (context.baselineWorkload !== undefined) {
            source = context.baselineWorkload;
            sourceColor = source
        }
        if (context.sandboxName !== undefined && context.sandboxName !== "") {
            source += " (sandbox=" + context.sandboxName + ")"
        } else if (source != "browser") {
            source += " (baseline)"
        }

        $('#' + reqID + '-entries').append(
            '<div class="row">' +
            '<div class="col-auto text-end fw-bold">' + time + '</div>' +
            '<div class="col text-start">' +
            '<span class="' + sourceColor + ' fw-bold marginright">' + source + '</span>' +
            '<em class="' + color + ' fw-bold">' + text + '.</em>' +
            '</div>' +
            '</div>'
        );
    }

    $("#requestRide").click(function (evt) {
        updateRequestID();

        const headers = {
            'baggage': 'session=' + sessionID + ', request=' + lastRequestID
        };
        console.log('sending headers', headers);

        var pickupLocationID = parseInt($('#pickupLocation').val());
        var dropoffLocationID = parseInt($('#dropoffLocation').val());

        logSuccess(new Date(), 'Requesting a ride', {
            request: {
                id: lastRequestID,
                pickupLocationID: pickupLocationID,
                dropoffLocationID: dropoffLocationID
            },
        })

        $.ajax(pathPrefix + '/dispatch?nonse=' + Math.random(), {
            headers: headers,
            method: 'POST',
            contentType : 'application/json',
            data: JSON.stringify({
                sessionID: sessionID,
                requestID: lastRequestID,
                pickupLocationID: pickupLocationID,
                dropoffLocationID: dropoffLocationID
            }),
            success: function (data, textStatus) {
            },
            error: function (xhr, status, error) {
                if (xhr.responseText) {
                    error += " (" + xhr.responseText + ")"
                }
                logError(new Date(), 'Error requesting a ride to frontend API', {
                    request: {
                        id: lastRequestID,
                        pickupLocationID: pickupLocationID,
                        dropoffLocationID: dropoffLocationID
                    },
                    error: error,
                })
            }
        });

        return false
    });

    // Load events from the frontend API
    var intervalId = setInterval(function () {
        const headers = {
            'baggage': 'session=' + sessionID
        };

        $.ajax(pathPrefix + '/notifications?sessionID='+ sessionID +'&cursor=' + notificationsCursor + '&nonse=' + Math.random(), {
            headers: headers,
            method: 'GET',
            success: function (data, textStatus) {
                // update our cursor
                notificationsCursor = data.cursor
                // display log entries
                data.notifications.forEach((element) => {
                    console.log(element)
                    logSuccess(new Date(element.timestamp), element.body, element.context)
                })
            },
            error: function (xhr, status, error) {
                if (xhr.responseText) {
                    error += " (" + xhr.responseText + ")"
                }
                logError(new Date(), 'Error loading notifications from frontend API', {
                    error: error,
                })
            }
        });
    }, 2000);
</script>

</html>
